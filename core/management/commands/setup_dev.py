from django.core.management.base import BaseCommand
from django.core.management import call_command
import os

class Command(BaseCommand):
    help = 'Configure l\'environnement de dÃ©veloppement'

    def handle(self, *args, **options):
        self.stdout.write(self.style.SUCCESS('ðŸš€ DÃ©marrage de la configuration...'))
        
        # CrÃ©ation des dossiers nÃ©cessaires
        folders = ['static', 'static/src', 'media', 'staticfiles']
        for folder in folders:
            if not os.path.exists(folder):
                os.makedirs(folder)
                self.stdout.write(self.style.SUCCESS(f'âœ… Dossier {folder} crÃ©Ã©'))

        # Migrations
        self.stdout.write(self.style.SUCCESS('\nðŸ”„ Application des migrations...'))
        call_command('makemigrations')
        call_command('migrate')

        # Collectstatic
        self.stdout.write(self.style.SUCCESS('\nðŸ“¦ Collecte des fichiers statiques...'))
        call_command('collectstatic', '--noinput')

        # Installation des dÃ©pendances npm
        self.stdout.write(self.style.SUCCESS('\nðŸ“¦ Installation des dÃ©pendances npm...'))
        os.system('npm install')

        # Compilation Tailwind
        self.stdout.write(self.style.SUCCESS('\nðŸŽ¨ Compilation de Tailwind CSS...'))
        os.system('npx tailwindcss -i ./static/src/input.css -o ./static/src/output.css')

        self.stdout.write(self.style.SUCCESS('\nâœ¨ Configuration terminÃ©e avec succÃ¨s!'))